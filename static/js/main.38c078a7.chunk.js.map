{"version":3,"sources":["excercise/sylaby.tsx","Btn.tsx","components/textarea.tsx","components/text.tsx","App.js","serviceWorker.js","index.js"],"names":["Rezultat","Btn","props","className","class","style","onClick","text","TextArea","onChange","e","target","value","Text","Sylaby","useState","zadania","setZadania","zad","setZad","ss","setSS","useEffect","z","sylaby","forEach","s","push","sylaba","wynik","NONE","left","filter","x","Math","floor","random","length","join","fontSize","litery","toUpperCase","toLowerCase","firstCol","color","substr","lastCol","getSylaba","zz","Object","assign","FAIL","padding","backgroundColor","border","borderRadius","OK","map","a","onEnd","App","setSylaby","sylabyParsed","setSylabyParsed","start","setStart","setLitery","setFontSize","setLastCol","setFirstCol","val","trim","split","startSylaby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38c078a7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Btn from '../Btn';\r\n\r\ntype Props = {\r\n    sylaby: Array<string>,\r\n    litery: boolean,\r\n    onEnd: () => void,\r\n    fontSize: string,\r\n    firstCol: boolean,\r\n    lastCol: boolean,\r\n};\r\n\r\nenum Rezultat {\r\n    OK,\r\n    FAIL,\r\n    NONE,\r\n}\r\n\r\ntype Zadanie = {\r\n    sylaba: string,\r\n    wynik: Rezultat,\r\n}\r\n\r\nconst Sylaby = (props: Props) => {\r\n    const [zadania, setZadania] = useState<Array<Zadanie>>();\r\n    const [zad, setZad] = useState<Zadanie>();\r\n\r\n    const [ss, setSS] = useState<boolean>(false);\r\n\r\n    useEffect(() =>{\r\n        const z: Array<Zadanie> = [];\r\n        props.sylaby.forEach(s => {\r\n            z.push({sylaba: s, wynik: Rezultat.NONE })\r\n        });\r\n        setZadania(z);\r\n    }, [props.sylaby]);\r\n\r\n    useEffect(() => {\r\n        const left = zadania?.filter(x=>x.wynik === Rezultat.NONE) || [];\r\n        const z = left[Math.floor(Math.random() * left.length)]; \r\n        setZad(z);\r\n    }, [zadania]);\r\n\r\n    const ZadOk = () => {\r\n        const zz: Array<Zadanie> = Object.assign([], zadania);\r\n        const z = zz?.filter(x => x.sylaba === zad?.sylaba)[0] || null;\r\n        if(z){\r\n            z.wynik = Rezultat.OK;\r\n            setZadania(zz);\r\n        }\r\n    };\r\n\r\n    const ZadFail = () => {\r\n        const zz: Array<Zadanie> = Object.assign([], zadania);\r\n        const z = zz?.filter(x => x.sylaba === zad?.sylaba)[0] || null;\r\n        if(z){\r\n            z.wynik = Rezultat.FAIL;\r\n            setZadania(zz);\r\n        }\r\n    };\r\n\r\n    const DoPoprawy = () => zadania?.filter(x => x.wynik === Rezultat.FAIL).map(a => a.sylaba).join(',');\r\n    const Poprawnie = () => zadania?.filter(x => x.wynik === Rezultat.OK).map(a => a.sylaba).join(',');\r\n\r\n    useEffect(() =>{\r\n        if(zadania?.filter(x => x.wynik === Rezultat.NONE).length === 0){\r\n            setSS(true);\r\n        }else{\r\n            setSS(false);\r\n        }\r\n    }, [zadania]);\r\n\r\n    const getSylaba = () => {\r\n        if(zad){\r\n            let x = props.litery ? zad.sylaba.toUpperCase() : zad.sylaba.toLowerCase();\r\n            if(props.firstCol && x.length > 1){\r\n                const y = <span><span style={{color:'red'}}>{x.substr(0,1)}</span>{x.substr(1,x.length-1)}</span>\r\n                return y;\r\n            }\r\n            if(props.lastCol && x.length > 1){\r\n                const y = <span>{x.substr(0,x.length-1)}<span style={{color:'red'}}>{x.substr(x.length-1,1)}</span></span>\r\n                return y;\r\n            }\r\n\r\n            return x;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return <div>\r\n        <div className='small'>Wybrane: {props.sylaby.join(',')}</div>\r\n        {zad && <div><div className='main' style={{fontSize: `${props.fontSize}px`}}>\r\n            {getSylaba()}\r\n            </div>\r\n        <br/><br/>\r\n        <Btn\r\n            text=\"Źle\" \r\n            onClick={ZadFail} \r\n            style={{\r\n                padding: '10px 30px 10px 30px',\r\n                backgroundColor: 'red',\r\n                color: 'white',\r\n                fontSize: '20px',\r\n                border: \"1px solid #ccc\",\r\n                borderRadius: '20px'\r\n            }}\r\n        />\r\n        <Btn \r\n            text=\"OK\" \r\n            onClick={ZadOk}\r\n            style={{\r\n                padding: '10px 30px 10px 30px',\r\n                backgroundColor: 'green',\r\n                color: 'white',\r\n                fontSize: '20px',\r\n                border: \"1px solid #ccc\",\r\n                borderRadius: '20px'\r\n            }}\r\n            /></div>}\r\n        {ss && <div>\r\n         <hr />\r\n         <div style={{fontSize: '26px'}}>\r\n        Do poprawy: <span style={{color: 'red'}}>{DoPoprawy()}</span></div> <br/>\r\n        <hr/>\r\n        OK: {Poprawnie()}\r\n        <Btn text='Powrót' onClick={props.onEnd} />\r\n        </div>}\r\n    </div>\r\n};\r\n\r\nexport default Sylaby;\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    text: string,\r\n    onClick?: () => void,\r\n    class?: string,\r\n    style?: React.CSSProperties,\r\n};\r\n\r\nconst Btn = (props: Props) =>{\r\n    return <button className={props.class} style={props.style} onClick={props.onClick}>{props.text}</button>;\r\n};\r\n\r\nexport default Btn;\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    value: string,\r\n    onChange: (val: string) => void,\r\n}\r\n\r\nconst TextArea = (props: Props) => {\r\n    return <textarea onChange={e => props.onChange(e.target.value)} value={props.value}>\r\n    </textarea>;\r\n};\r\n\r\nexport default TextArea;\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    value: string,\r\n    onChange: (val: string) => void,\r\n}\r\n\r\nconst Text = (props: Props) => {\r\n    return <input onChange={e => props.onChange(e.target.value)} value={props.value} />;\r\n};\r\n\r\nexport default Text;\r\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Btn from './Btn.tsx';\nimport TextArea from './components/textarea';\nimport Text from './components/text';\nimport Sylaby from './excercise/sylaby';\n\nconst App = (props) => {\n  const [sylaby, setSylaby] = useState(\"\");\n  const [sylabyParsed, setSylabyParsed] = useState([]);\n\n  const [start, setStart] = useState(false);\n\n  const [litery, setLitery] = useState(false);\n  const [fontSize, setFontSize] = useState('250');\n  const [lastCol, setLastCol] = useState(false);\n  const [firstCol, setFirstCol] = useState(false);\n\n  const startSylaby = () =>{\n    const x = sylaby.trim().split(',');\n    setSylabyParsed(x);\n    setStart(true);\n  };\n  \n  return (\n    <div className=\"App\">\n      {!start && <div>\n      <Btn text='Litery' onClick={() => setLitery(!litery)}/>: {!litery ? 'małe' : 'DUŻE'}<br/>\n      Czcionka: <Text onChange={val => setFontSize(val)} value={fontSize} /><br/>\n      <Btn text='Pierwsz kolorowa' onClick={() => setFirstCol(!firstCol)} /> {firstCol? 'TAK' : 'NIE'}<br/>\n      <Btn text='Ostatnia kolorowa' onClick={() => setLastCol(!lastCol)} /> {lastCol? 'TAK' : 'NIE'}<br/>\n      <TextArea onChange={val => setSylaby(val)} value={sylaby} />\n      <br/>\n      <Btn text='Start' onClick={() => startSylaby()} class='startBtn' />\n      </div>\n      }\n      {start && <div> \n         <Sylaby\n          litery={litery}\n          sylaby={sylabyParsed}\n          onEnd={() => setStart(false)}\n          fontSize={fontSize}\n          firstCol={firstCol}\n          lastCol={lastCol}\n        />\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}